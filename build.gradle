/*
 * Copyright (c) 2021 TraceTronic GmbH
 *
 * SPDX-License-Identifier: MIT
 */
import org.gradle.plugins.ide.idea.model.IdeaLanguageLevel

plugins {
    id 'groovy'
    id 'idea'
}

group 'de.tracetronic.jenkins'
description 'This is a shared library to extend Jenkins pipelines and to keep code DRY.'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {
        groovy {
            srcDirs = ['src', 'vars']
        }
        resources {
            srcDirs = ['resources']
        }
    }
    test {
        groovy {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}

repositories {
    jcenter()
    maven {
        url 'https://repo.jenkins-ci.org/releases/'
    }
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.5.6'
    compile 'org.jenkins-ci.main:jenkins-core:2.361.4'
    compile 'org.jenkins-ci.plugins.workflow:workflow-api:1208.v0cc7c6e0da_9e@jar'
    compile 'org.jenkins-ci.plugins.workflow:workflow-support:839.v35e2736cfd5c@jar'
    compile 'org.jenkins-ci.plugins.pipeline-stage-view:pipeline-rest-api:2.32@jar'
    compile 'com.cloudbees:groovy-cps:3659.v582dc37621d8@jar'

    testCompile 'com.lesfurets:jenkins-pipeline-unit:1.16'
    testCompile 'org.testcontainers:spock:1.15.3'
    testCompile 'org.hamcrest:hamcrest-core:2.2@jar'
    testCompile 'org.jenkins-ci.main:jenkins-war:2.361.4'
    testCompile 'org.jenkins-ci.main:jenkins-test-harness:1954.v2e3fd5465b_a_6'
    testCompile 'org.jenkins-ci.plugins:structs:324.va_f5d6774f3a_d@jar'
    testCompile 'org.jenkins-ci.plugins.workflow:workflow-cps:3659.v582dc37621d8@jar'
    testCompile 'org.jenkins-ci.plugins.workflow:workflow-job:1292.v27d8cc3e2602@jar'
    testCompile 'org.jenkins-ci.plugins.workflow:workflow-step-api:639.v6eca_cd8c04a_a_@jar'
    testCompile 'org.powermock:powermock-core:2.0.9'
    testCompile 'org.spockframework:spock-core:1.3-groovy-2.5'
}

test {
    filter {
        includeTestsMatching('*Test')
    }
    dependsOn cleanTest
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

task integrationTest(type: Test) {
    filter {
        includeTestsMatching('*IT')
    }
    dependsOn cleanTest
    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}

groovydoc {
    docTitle = "${project.name} documentation"
    windowTitle = "${project.name} documentation"
    noTimestamp = true
    noVersionStamp = true
}

task renameDoc {
    doLast {
        file('docs/DefaultPackage').renameTo(file('docs/vars'))
    }
}
task postGroovyDoc(type: Copy) {
    from "${project.docsDir}/groovydoc"
    into 'docs'
    filter { line -> line.replaceAll('DefaultPackage', 'vars') }
}

task deleteOldDocs(type: Delete) {
    delete 'docs'
    followSymlinks = true
}

task documentation(type: GradleBuild) {
    tasks = ['groovydoc', 'deleteOldDocs', 'postGroovyDoc', 'renameDoc']
}

idea {
    project {
        vcs = 'Git'
        jdkName = '1.8'
        languageLevel = '8'
    }
    module {
        jdkName = '1.8'
        languageLevel = new IdeaLanguageLevel('8')
        downloadJavadoc = true
        downloadSources = true
    }
}

wrapper {
    gradleVersion = '6.8'
}
